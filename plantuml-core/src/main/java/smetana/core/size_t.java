// THIS FILE HAS BEEN GENERATED BY A PREPROCESSOR.

package smetana.core;

/**
 * "Pseudo size" of a C structure. In C, this is the actual size of the
 * structure. In Java, this is an indication to know which structure we are
 * going to allocate.
 * 
 * @author Arnaud Roques
 * 
 */
final public class size_t {

	public final ZType tobeAllocated;

	@Override
	public String toString() {
		return super.toString() + " " + tobeAllocated;
	}

	public size_t(ZType tobeAllocated) {
		this.tobeAllocated = tobeAllocated;
	}

	public size_t negate() {
		throw new UnsupportedOperationException();
	}

	public size_t multiply(int sz) {
		throw new UnsupportedOperationException();
	}

	public boolean isStrictPositive() {
		return true;
	}

	public boolean isStrictNegative() {
		throw new UnsupportedOperationException();
	}

	public final ZType getTobeAllocated() {
		return tobeAllocated;
	}

	public __ptr__ malloc() {
		return tobeAllocated.create();
	}

	public size_t plus(int strlen) {
		throw new UnsupportedOperationException();
	}

	public boolean isZero() {
		return false;
	}

	public __ptr__ realloc(Object old) {
		throw new UnsupportedOperationException();
	}

	public int getInternalNb() {
		throw new UnsupportedOperationException();
	}

}
